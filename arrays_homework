
Youtube video URL   https://youtu.be/vIAKLB4mo6s


Find the index of an element that appears once where all other elements appear twice in a sorted array
Hints:
      index    0 1 2 3 4 5 6
      array = {1,1,2,2,3,4,4}
      
      The target is at index 4. Before the target every even index number is followed by same number.After the target every odd index number is followed by same number.the target lies either right half of the array or left half of the array.
      using binary search it takes O(logn)time.
      
Pseudocode :

1. Initialize lowerIndex=0 and higherIndex= arraySize-1;
2.While lowerIndex < higherIndex
  compute mid = lowerIndex+higherIndex/2.
  
  If the mid value is even
     if array[mid] euals array[mid+1] set lowerIndex = mid.
     else set higherIndex=mid.
  
  If the mid value is odd
     if array[mid-1] equals array[mid] set lowerindex=mid+1
     else set higherIndex=mid.
3.Return array[lowerIndex]     
 
 *************************************************************************************************** 
2. A magic index in an array A[0…n-1] is defined to be an index such that A[i] = i. Given a sorted array of distinct integers, write a method to find a magic index if one exists, in an array A 
        Index 0 1  2 3 4 
        A = {-1,-2,0,3,5}
    Hint: Before magic index the values are less than indexes. After the magic index the values are greater than the indexes.

Pseudocode:   
      a.Intialize lowerLimit =0 and upperLimit=size-1.
      b.while lowerLimit<higherLimit
         compute mid =lowerLimit+higherLimit/2
         if A[mid]=mid return mid
         If A[mid]<mid magic index lies on left side of the mid
            set lowerLimit=mid 
          else magic index lies right side of the mid
              set higherIndex=mid
            
     Time taken= O(logn) 
      
  ****************************************************************************************************
  3.Given a sorted array of n integers that has been rotated an unknown number of times, write code to find an element in the array. You may assume that the array was originally sorted in increasing order.    
      
Hints: index 0  1  2  3   4   5   
        A = {4, 6, 7, 9, 12, 15}    After three rotations the elements the elements looks like this.
            {9, 12,15, 4 ,6, 7} 
     In rotated array either left half of the array or right half of the array must be ordered normally. 
      To find a given element( e.x 15), I need to find on which side of the mid point of the array it lies .

Pseudocode:      
  1.initialize right=0 and left=size-1; 
  2.compute mid = left+right/2.
  3.while left<right
  if value of mid is greater than value of right   (the right half array is ordered normally)
      now check if x>mid and x<=right.If it is true the x lies in right half.
      Set left = mid+1
      otherwise the value lies on left half.set right=mid-1.
   If mid<left right half is ordered normally.
   Now check if x>mid and x<=left. If it is true x lies in left half.Set right = mid-1
   otherwise right half. set left=mid+1
   4.Go to step 2.
   5.End while
   6.Return mid
   
**************************************************************************************************************************************

4.Given an array that contains numbers from 1 to n-1 and exactly 1 duplicate, find that duplicate.

1.find the sum of the first n-1 integers by using formula n(n+1)/2   
2.traversing through each element find the sum of the array elements.
3.The duplicate is difference of the sum of elements and sum of n-1 integers.
   
****************************************************************************************************************************************

5.Search an element in an array where difference between adjacent elements is 1.

Hints: 
The successor of  the given element should be one less than that number.

Pseudocode:
          1.Start from index=0.
          2.If array[i]==target and array[i+1]==target-1. 
          3.return i  which is the index where the target is.    
      
 ***************************************************************************************************************************************
 
 6.Given an array of numbers, split the array into two where one array contains the sum of n-1 numbers and the other array with all the n-1 elements.
 
  Array = {2,4,3,9}
    If half of the sum of the all elements  is equal to the greatest number of the array, then it is a valid array.
Pseudocode ;
    1.initialize biggest number, greatest value index to zero.
    2.traverse through each element and find the sum of the elements and biggest number of all elements.
    3.check if the sum/2 equal to the array[gretestIndex];
    4.copy all the elements except sum element into another array, sum element into another array.
    
        
      
      
      
      
      
      

   
 
    